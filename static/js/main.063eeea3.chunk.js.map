{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","React","lazy","CityList","Fn404","Map","HouseDetail","Login","Rent","RentAdd","RentSearch","App","className","fallback","from","exact","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAUMA,G,MAAOC,IAAMC,MAAK,kBAAM,6EACxBC,EAAWF,IAAMC,MAAK,kBAAM,+DAC5BE,EAAQH,IAAMC,MAAK,kBAAM,kCACzBG,EAAMJ,IAAMC,MAAK,kBAAM,wDACvBI,EAAcL,IAAMC,MAAK,kBAAM,sEAC/BK,EAAQN,IAAMC,MAAK,kBAAM,+DACzBM,EAAOP,IAAMC,MAAK,kBAAM,wDACxBO,EAAUR,IAAMC,MAAK,kBAAM,sEAC3BQ,EAAaT,IAAMC,MAAK,kBAAM,wDAyBrBS,MAvBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,KAAK,IAAIC,OAAK,EAACC,GAAG,UAC5B,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWlB,IAC/B,kBAAC,IAAD,CAAOiB,KAAK,OAAOC,UAAWb,IAC9B,kBAAC,IAAD,CAAOY,KAAK,YAAYC,UAAWf,IACnC,kBAAC,IAAD,CAAOc,KAAK,cAAcC,UAAWZ,IACrC,kBAAC,IAAD,CAAOW,KAAK,SAASC,UAAWX,IAChC,kBAAC,IAAD,CAAOU,KAAK,QAAQF,OAAK,EAACG,UAAWV,IACrC,kBAAC,IAAD,CAAOS,KAAK,YAAYC,UAAWT,IACnC,kBAAC,IAAD,CAAOQ,KAAK,eAAeC,UAAWR,IACtC,kBAAC,IAAD,CAAOQ,UAAWd,SCvBVe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.063eeea3.chunk.js","sourcesContent":["import React, { Suspense } from \"react\";\r\n// import logo from './logo.svg';\r\nimport {\r\n  HashRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport \"./App.scss\";\r\n\r\nconst Home = React.lazy(() => import(\"./pages/home\"));\r\nconst CityList = React.lazy(() => import(\"./pages/cityList\"));\r\nconst Fn404 = React.lazy(() => import(\"./pages/fn404\"));\r\nconst Map = React.lazy(() => import(\"./pages/map\"));\r\nconst HouseDetail = React.lazy(() => import(\"./components/HouseDetail\"));\r\nconst Login = React.lazy(() => import(\"./pages/Login\"));\r\nconst Rent = React.lazy(() => import(\"./pages/Rent\"));\r\nconst RentAdd = React.lazy(() => import(\"./pages/Rent/Add\"));\r\nconst RentSearch = React.lazy(() => import(\"./pages/Rent/Search\"));\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <Switch>\r\n            <Redirect from=\"/\" exact to=\"/home\" />\r\n            <Route path=\"/home\" component={Home} />\r\n            <Route path=\"/map\" component={Map} />\r\n            <Route path=\"/cityList\" component={CityList} />\r\n            <Route path=\"/detail/:id\" component={HouseDetail} />\r\n            <Route path=\"/login\" component={Login} />\r\n            <Route path=\"/rent\" exact component={Rent} />\r\n            <Route path=\"/rent/add\" component={RentAdd} />\r\n            <Route path=\"/rent/search\" component={RentSearch} />\r\n            <Route component={Fn404} />\r\n          </Switch>\r\n        </Suspense>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n// 引入字体图标\r\nimport \"./assets/fonts/iconfont.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}