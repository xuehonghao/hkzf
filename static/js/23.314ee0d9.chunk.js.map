{"version":3,"sources":["utils/axios.js","utils/currentCity.js","utils/api/home/index.js","pages/index/index.js","utils/api/area/index.js"],"names":["BaseURL","api","axios","create","baseURL","interceptors","request","use","config","url","headers","startsWith","includes","authorization","getToken","loading","error","Promise","reject","response","res","status","data","description","body","hide","setToken","localStorage","setItem","getItem","removeToken","removeItem","isAuth","setSession","sessionStorage","JSON","stringify","getSession","currCity","parse","getCurrCity","a","currCityByLocal","resolve","window","BMap","LocalCity","get","result","name","currCityByMap","resove","getCityInfo","getSwiper","getGroups","area","params","getNews","index","state","swipers","groups","news","keyword","imgHeight","autoplay","loadDatas","apis","all","group","setState","renderSwiper","className","infinite","map","val","key","Date","href","style","display","width","height","src","imgSrc","alt","onLoad","dispatchEvent","Event","renderNav","navs","item","Item","onClick","props","history","push","path","id","img","title","renderGroup","justify","columnNum","square","hasLine","renderItem","desc","renderInfo","size","direction","from","date","renderTopNav","label","value","onChange","v","placeholder","this","Component","getCities","level","getHotCity","getCommunity","getMapHouses"],"mappings":"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","file":"static/js/23.314ee0d9.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { Toast } from \"antd-mobile\";\nimport { getToken } from \"./currentCity\";\n\n// 基地址\nconst BaseURL = \"https://api-haoke-web.itheima.net\";\n\nconst api = axios.create({\n  baseURL: BaseURL,\n});\n\n// Add a request interceptor  请求拦截器\napi.interceptors.request.use(\n  function (config) {\n    const { url, headers } = config;\n    const list = [\"/user/registered\", \"/user/login\"]; // 白名单\n\n    if (url.startsWith(\"/user\") && !list.includes(url)) {\n      // 设置公共请求头\n      headers.authorization = getToken();\n    }\n\n    // 动画加载\n    Toast.loading(\"加载中...\", 0);\n    // Do something before request is sent\n    return config;\n  },\n  function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor  响应拦截器\napi.interceptors.response.use(\n  function (response) {\n    // 简化返回结果\n    let res = {\n      status: response.data.status,\n      description: response.data.description,\n      data: response.data.body,\n    };\n    // 动画结束\n    Toast.hide();\n    return res;\n  },\n  function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\nexport { BaseURL };\n","import { getCityInfo } from \"./api/area\";\n\nconst CURR_CITY = \"currCity\"; // 当前城市\nconst USER_TOKEN = \"token\";\n\n// 设置Token\nconst setToken = (data) => {\n  localStorage.setItem(USER_TOKEN, data);\n};\n\n// 获取Token\nconst getToken = () => {\n  let token = localStorage.getItem(USER_TOKEN);\n  return token;\n};\n\n// 删除Token\nconst removeToken = () => {\n  localStorage.removeItem(USER_TOKEN);\n};\n\n// 是否登录判断：boolean\nconst isAuth = () => !!getToken();\n\n// 设置当前城市\nconst setSession = (data) => {\n  sessionStorage.setItem(CURR_CITY, JSON.stringify(data));\n};\n\n// 获取当前城市\nconst getSession = () => {\n  let currCity = sessionStorage.getItem(CURR_CITY);\n  if (!!!currCity) return null;\n  return JSON.parse(currCity);\n};\n\n// 删除当前城市\n// const removeSession = () => {\n//   sessionStorage.removeItem(CURR_CITY);\n// };\n\n// 百度获取\nconst getCurrCityByMap = () => {\n  return new Promise((resolve, reject) => {\n    // 使用百度地图LocalCity获取当前的城市名称\n    const myCity = new window.BMap.LocalCity();\n    myCity.get((result) => {\n      // 根据百度地图获取到城市名字，调用后台接口获取当前城市的详细数据\n      resolve(result.name);\n    });\n  });\n};\n\n// 获取当前城市信息\nconst getCurrCity = async () => {\n  // 内存中找\n  const currCityByLocal = getSession();\n\n  // 定位\n  const currCityByMap = await getCurrCityByMap();\n  // 内存中没有 || 内存中有键没值 || 定位和内存中的值不匹配  这样判断，手动切换城市就会有bug\n  // if (\n  //   !currCityByLocal ||\n  //   !currCityByLocal.label ||\n  //   !currCityByMap.includes(currCityByLocal.label)\n  // ) {\n\n  if (!currCityByLocal) {\n    return new Promise(async (resove, reject) => {\n      // 调用接口获取城市详细信息\n      const { status, data } = await getCityInfo(currCityByMap);\n      if (status === 200) {\n        // 存到本地\n        setSession(data);\n        // 传递数据\n        resove(data);\n      } else {\n        reject(\"error\");\n      }\n    });\n  } else {\n    // 如果有，返回本地存储获取的信息\n    return Promise.resolve(currCityByLocal);\n  }\n};\n\nexport {\n  getCurrCity,\n  setSession,\n  CURR_CITY,\n  setToken,\n  getToken,\n  removeToken,\n  isAuth,\n};\n","import api from \"../../axios\";\n\n// 首页轮播图\nconst getSwiper = () => {\n  return api.get(\"/home/swiper\");\n};\n\n// 租房小组\nconst getGroups = (area = \"AREA|88cff55c-aaa4-e2e0\") => {\n  return api.get(\"/home/groups\", {\n    params: {\n      area,\n    },\n  });\n};\n\n// 资讯\nconst getNews = (area = \"AREA|88cff55c-aaa4-e2e0\") => {\n  return api.get(\"/home/news\", {\n    params: {\n      area,\n    },\n  });\n};\n\nexport { getSwiper, getGroups, getNews };\n","import React, { Component } from \"react\";\n\n// 引入组件\nimport { Carousel, Flex, Grid, WingBlank, SearchBar } from \"antd-mobile\";\n\n// 引入当前组件样式\nimport \"./index.scss\";\n\n// 引入基地址\nimport { BaseURL } from \"../../utils/axios\";\n\n// 引入接口\nimport { getSwiper, getGroups, getNews } from \"../../utils/api/home/index\";\nimport { getCurrCity } from \"../../utils/currentCity\";\n\n// 引入常量\nimport { navs } from \"../../utils/homeConfig\";\n\nclass index extends Component {\n  state = {\n    swipers: [], // 轮播图片\n    groups: [], // 租房小组\n    news: [], // 资讯\n    currCity: {}, // 当前城市\n    keyword: \"\", // 顶部输入框文字\n    imgHeight: 176,\n    autoplay: false,\n  };\n  componentDidMount() {\n    // 加载数据\n    this.loadDatas();\n    this.getCurrCity();\n  }\n\n  // 加载数据\n  loadDatas = async () => {\n    const apis = [getSwiper(), getGroups(), getNews()];\n    let [swipers, group, news] = await Promise.all(apis);\n    this.setState(\n      {\n        swipers: swipers.data,\n        groups: group.data,\n        news: news.data,\n      },\n      () => {\n        this.setState({\n          autoplay: true,\n        });\n      }\n    );\n  };\n\n  // 获取当前城市信息\n  getCurrCity = async () => {\n    let data = await getCurrCity();\n    this.setState({\n      currCity: data,\n    });\n  };\n\n  // 轮播图组件渲染\n  renderSwiper = () => {\n    return (\n      // 轮播图\n      <Carousel className=\"swiper\" autoplay={this.state.autoplay} infinite>\n        {this.state.swipers.map((val) => (\n          <a\n            key={new Date()}\n            href=\"http://www.itheima.com\"\n            style={{\n              display: \"inline-block\",\n              width: \"100%\",\n              height: this.state.imgHeight,\n            }}\n          >\n            <img\n              src={`${BaseURL}${val.imgSrc}`}\n              alt=\"\"\n              onLoad={() => {\n                // 屏幕适配\n                // fire window resize event to change height\n                window.dispatchEvent(new Event(\"resize\"));\n                this.setState({ imgHeight: \"auto\" });\n              }}\n            />\n          </a>\n        ))}\n      </Carousel>\n    );\n  };\n\n  // nav导航栏渲染\n  renderNav = () => {\n    return (\n      <Flex className=\"nav\">\n        {navs.map((item) => (\n          <Flex.Item\n            onClick={() => this.props.history.push(item.path)}\n            key={item.id}\n          >\n            <img src={item.img} alt=\"\" />\n            <p>{item.title}</p>\n          </Flex.Item>\n        ))}\n      </Flex>\n    );\n  };\n\n  // 租房小组 渲染\n  renderGroup = () => {\n    return (\n      <div className=\"group\">\n        {/* 标题 */}\n        <Flex className=\"group-title\" justify=\"between\">\n          <h3>租房小组</h3>\n          <span>更多</span>\n        </Flex>\n        {/* 宫格 */}\n        <Grid\n          data={this.state.groups}\n          columnNum={2}\n          square={false}\n          hasLine={false}\n          renderItem={(item) => {\n            return (\n              // item结构\n              <Flex className=\"grid-item\" justify=\"between\">\n                <div className=\"desc\">\n                  <h3>{item.title}</h3>\n                  <p>{item.desc}</p>\n                </div>\n                <img src={`${BaseURL}${item.imgSrc}`} alt=\"\" />\n              </Flex>\n            );\n          }}\n        />\n      </div>\n    );\n  };\n\n  // 最新资讯渲染\n  renderInfo = () => {\n    // 渲染最新资讯\n    let renderNews = () => {\n      return this.state.news.map((item) => (\n        <div className=\"news-item\" key={item.id}>\n          <div className=\"imgwrap\">\n            <img className=\"img\" src={`${BaseURL}${item.imgSrc}`} alt=\"\" />\n          </div>\n          <Flex className=\"content\" direction=\"column\" justify=\"between\">\n            <h3 className=\"title\">{item.title}</h3>\n            <Flex className=\"info\" justify=\"between\">\n              <span>{item.from}</span>\n              <span>{item.date}</span>\n            </Flex>\n          </Flex>\n        </div>\n      ));\n    };\n    return (\n      <div className=\"news\">\n        <h3 className=\"group-title\">最新资讯</h3>\n        <WingBlank size=\"md\">{renderNews()}</WingBlank>\n      </div>\n    );\n  };\n\n  // 渲染顶部导航\n  renderTopNav = () => {\n    return (\n      <Flex justify=\"around\" className=\"topNav\">\n        <div className=\"searchBox\">\n          <div\n            className=\"city\"\n            onClick={() => this.props.history.push(\"/cityList\")}\n          >\n            {this.state.currCity.label}\n            <i className=\"iconfont icon-arrow\" />\n          </div>\n          <SearchBar\n            value={this.state.keyword}\n            onChange={(v) => this.setState({ keyword: v })}\n            placeholder=\"请输入小区或地址\"\n          />\n        </div>\n        <div className=\"map\">\n          <i key=\"0\" className=\"iconfont icon-map\" />\n        </div>\n      </Flex>\n    );\n  };\n\n  render() {\n    return (\n      <>\n        {/*  轮播图 */}\n        {this.renderSwiper()}\n\n        {/* nav导航栏 */}\n        {this.renderNav()}\n\n        {/* 租房小组 */}\n        {this.renderGroup()}\n\n        {/* 最新资讯 */}\n        {this.renderInfo()}\n\n        {/* 渲染顶部导航 */}\n        {this.renderTopNav()}\n      </>\n    );\n  }\n}\n\nexport default index;\n","import api from \"../../axios\";\n\n// 根据城市名称查询该城市的信息\nconst getCityInfo = (name) => {\n  return api.get(\"/area/info\", {\n    params: {\n      name,\n    },\n  });\n};\n\n// 获取城市列表数据\nconst getCities = (level = 1) => {\n  return api.get(\"/area/city\", {\n    params: {\n      level,\n    },\n  });\n};\n\n// 获取热门城市\nconst getHotCity = () => {\n  return api.get(\"/area/hot\");\n};\n\n// 小区关键词查询\nconst getCommunity = (name, id) => {\n  return api.get(\"/area/community\", {\n    params: {\n      name,\n      id,\n    },\n  });\n};\n\n// 查询房源数据\nconst getMapHouses = (id) => {\n  return api.get(\"/area/map\", {\n    params: {\n      id,\n    },\n  });\n};\n\nexport { getCityInfo, getCities, getHotCity, getCommunity, getMapHouses };\n"],"sourceRoot":""}